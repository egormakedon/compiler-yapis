grammar Grammar;
SPACE : [ \t\n\r]+ -> skip;
STRING : '"'(.)+?'"';
OPEN_CURLY_BRACKET : '{';
CLOSE_CURLY_BRACKET : '}';
OPEN_BRACKET : '(';
CLOSE_BRACKET : ')';
PRINT : 'print';
VOID : 'void';
LIST : 'List';
ELEMENT : 'Element';
COMMA : ',';
NAME : [a-z]+;
program : block voidFunction*;
block : OPEN_CURLY_BRACKET content* CLOSE_CURLY_BRACKET;
print : PRINT OPEN_BRACKET STRING CLOSE_BRACKET;
content : print | functionCall;
type : LIST | ELEMENT;
functionSignature : OPEN_BRACKET type NAME (COMMA type NAME)* CLOSE_BRACKET;
voidFunction : VOID NAME (functionSignature | (OPEN_BRACKET CLOSE_BRACKET)) block;
functionParameters : OPEN_BRACKET NAME (COMMA NAME)* CLOSE_BRACKET;
functionCall : NAME (functionParameters | (OPEN_BRACKET CLOSE_BRACKET));